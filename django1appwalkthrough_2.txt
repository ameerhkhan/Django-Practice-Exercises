PART 2 of my first Django app. Using tutorial provided by Django themselves.

This tutorial carries off from 'django1appwalkthrough.txt' and starts off from the 
5th Page of the tutorial.

Let's get started.

##############################
Introducing automated testing
##############################

We’ve built a Web-poll application, and we’ll now create some automated tests for it.

What are automated tests?

Tests are routines that check the operation of your code.

testing work is done for you by the system. You create a set of tests once, 
and then as you make changes to your app, you can check 
that your code still works as you originally intended, without having to perform time consuming manual testing.

Why you need to create tests

Tests will save you time.

 If something’s gone wrong, tests will also assist in identifying the code that’s causing the unexpected behavior.

 However, the task of writing tests is a lot more fulfilling than 
 spending hours testing your application manually or trying to identify the cause of a newly-introduced problem.

 Tests make your code more attractive

 “Code without tests is broken by design.”

 =========================================
 Basic testing strategies
 =========================================

 There are many ways to approach writing tests.

 Some programmers follow a discipline called “test-driven development”; 
 they actually write their tests before they write their code. 
 This might seem counter-intuitive, but in fact it’s similar 
 to what most people will often do anyway: they describe a problem, then create some code to solve it. 
 Test-driven development formalizes the problem in a Python test case.

 it’s fruitful to write your first test the next time you make a change, either when you add a new feature or fix a bug.

 So let’s do that right away.

 ============================
 Writing our first test
 ============================

 We identify a bug,

Fortunately, there’s a little bug in the polls application for us to fix right away: the Question.was_published_recently() method returns True if the Question was published within the last day (which is correct) but also if the Question’s pub_date field is in the future (which certainly isn’t).

Confirm the bug by using the shell to check the method on a question whose date lies in the future:

    >python manage.py shell

    --> import datetime
    --> from django.utils import timezone
    --> from polls.models import Question
    --> #Create a Question instance having a pub_date 30 days into the future.
    --> future_question = Question(pub_date=timezone.now() + datetime.timedelta(days=30))
    --> future_question.was_published_recently()
    --> #True and we need to fix this.

Create a test to expose the bug,

What we’ve just done in the shell to test for the problem is exactly what we can do in an automated test, so let’s turn that into an automated test.

A conventional place for an application’s tests is in the application’s tests.py file; 
the testing system will automatically find tests in any file whose name begins with test.

polls/tests.py"""
import datetime

from django.test import TestCase
from django.utils import timezone

from .models import Question


class QuestionModelTests(TestCase):

    def test_was_published_recently_with_future_question(self):
        """
        was_published_recently() returns False for questions whose pub_date
        is in the future.
        """
        time = timezone.now() + datetime.timedelta(days=30)
        future_question = Question(pub_date=time)
        self.assertIs(future_question.was_published_recently(), False)

"""

Here we have created a django.test.TestCase subclass with a method that creates 
a Question instance with a pub_date in the future. 
We then check the output of was_published_recently() - which ought to be False.

==============
Running tests
==============

In the terminal, we can run our test:

What happened is this:

    manage.py test polls looked for tests in the polls application
    it found a subclass of the django.test.TestCase class
    it created a special database for the purpose of testing
    it looked for test methods - ones whose names begin with test
    in test_was_published_recently_with_future_question it created a Question instance whose pub_date field is 30 days in the future
    and using the assertIs() method, it discovered that its was_published_recently() returns True, though we wanted it to return False


=====================
Fixing the bug
=====================

Amend the method in models.py, so that it will only return True if the date is also in the past:

polls/models.py"""

def was_published_recently(self):
    now = timezone.now()
    return now - datetime.timedelta(days=1) <= self.pub_date <= now

"""

and run the test again:

    > python manage.py test polls

After identifying a bug, we wrote a test that exposes it and corrected the bug in the code so our test passes.

===================================
More Comprehensive Tests
===================================

While we’re here, we can further pin down the was_published_recently() method; 
in fact, it would be positively embarrassing if in fixing one bug we had introduced another.

Add two more test methods to the same class, to test the behavior of the method more comprehensively:

polls/tests.py"""

def test_was_published_recently_with_old_question(self):
    """
    was_published_recently() returns False for questions whose pub_date
    is older than 1 day.
    """
    time = timezone.now() - datetime.timedelta(days=1, seconds=1)
    old_question = Question(pub_date=time)
    self.assertIs(old_question.was_published_recently(), False)

def test_was_published_recently_with_recent_question(self):
    """
    was_published_recently() returns True for questions whose pub_date
    is within the last day.
    """
    time = timezone.now() - datetime.timedelta(hours=23, minutes=59, seconds=59)
    recent_question = Question(pub_date=time)
    self.assertIs(recent_question.was_published_recently(), True)

"""

And now we have three tests that confirm that Question.was_published_recently() returns sensible values for past, recent, and future questions.


=========================
TEST A VIEW:
=========================

Setting a pub_date in the future should mean that the Question is published at that moment, 
but invisible until then.

For this test, we want to check its behavior as it would be experienced by a user through a web browser.

Before we try to fix anything, let’s have a look at the tools at our disposal.

The Django test client
======================

Django provides a test Client to simulate a user interacting with the code at the view level. 
We can use it in tests.py or even in the shell.

We will start again with the shell, where we need to do a couple of things that won’t be necessary in tests.py. The first is to set up the test environment in the shell:

    > python manage.py shell
    --> from django.test.utils import setup_test_environment
    --> setup_test_environment()
    
setup_test_environment() installs a template renderer which will allow us to examine some additional 
attributes on responses such as response.context that otherwise wouldn’t be available.

Note that this method does not setup a test database, so the following will be run against the existing 
database and the output may differ slightly depending on what questions you already created. 

Next we need to import the test client class 
(later in tests.py we will use the django.test.TestCase class, which comes with its own client, so this won’t be required):

    --> from django.test import client
    --> #create an instant of a client for our use.
    --> client = Client()

With that ready, we can ask the client to do some work for us:

    --> #get a response from '/'
    --> response = client.get('/')
    --> response.status_code #displays 404 which means NOT found
    --> on the other hand we should expect to find something at '/polls/'
    --> # we'll use 'reverse()' rather than a hardcoded URL
    --> from django.urls import reverse
    --> response = client.get(reverse('polls:index'))
    --> response.status_code #returns 200 which means OK
    --> response.content
    --> response.context['latest_question_list'] #return latest questions.


=======================
Improving our view
=======================

The list of polls shows polls that aren’t 
published yet (i.e. those that have a pub_date in the future). Let’s fix that.

We need to amend the get_queryset() in polls/views.py method and change it so that it also checks the date by comparing it with timezone.now(). 
First we need to add an import:

polls/views.py"""
from django.utils import timezone

def get_queryset(self):
    """
    Return the last five published questions (not including those set to be
    published in the future).
    """
    return Question.objects.filter(
        pub_date__lte=timezone.now()
    ).order_by('-pub_date')[:5]

"""

Question.objects.filter(pub_date__lte=timezone.now()) returns a queryset containing
Questions whose pub_date is less than or equal to - that is, earlier than or equal to - timezone.now.

=======================
Testing our new view
=======================

Now you can satisfy yourself that this behaves as expected by firing up runserver, loading the site in your browser, creating Questions with dates in the past and future, and checking that only those that have been published are listed. 

You don’t want to have to do that every single time you make any change that might affect this - so let’s also create a test, based on our shell session above.

Add the following to polls/tests.py:

polls/tests.py"""

from django.urls import reverse

def create_question(question_text, days):
    """
    Create a question with the given `question_text` and published the
    given number of `days` offset to now (negative for questions published
    in the past, positive for questions that have yet to be published).
    """
    time = timezone.now() + datetime.timedelta(days=days)
    return Question.objects.create(question_text=question_text, pub_date=time)


class QuestionIndexViewTests(TestCase):
    def test_no_questions(self):
        """
        If no questions exist, an appropriate message is displayed.
        """
        response = self.client.get(reverse('polls:index'))
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, "No polls are available.")
        self.assertQuerysetEqual(response.context['latest_question_list'], [])

    def test_past_question(self):
        """
        Questions with a pub_date in the past are displayed on the
        index page.
        """
        create_question(question_text="Past question.", days=-30)
        response = self.client.get(reverse('polls:index'))
        self.assertQuerysetEqual(
            response.context['latest_question_list'],
            ['<Question: Past question.>']
        )

    def test_future_question(self):
        """
        Questions with a pub_date in the future aren't displayed on
        the index page.
        """
        create_question(question_text="Future question.", days=30)
        response = self.client.get(reverse('polls:index'))
        self.assertContains(response, "No polls are available.")
        self.assertQuerysetEqual(response.context['latest_question_list'], [])

    def test_future_question_and_past_question(self):
        """
        Even if both past and future questions exist, only past questions
        are displayed.
        """
        create_question(question_text="Past question.", days=-30)
        create_question(question_text="Future question.", days=30)
        response = self.client.get(reverse('polls:index'))
        self.assertQuerysetEqual(
            response.context['latest_question_list'],
            ['<Question: Past question.>']
        )

    def test_two_past_questions(self):
        """
        The questions index page may display multiple questions.
        """
        create_question(question_text="Past question 1.", days=-30)
        create_question(question_text="Past question 2.", days=-5)
        response = self.client.get(reverse('polls:index'))
        self.assertQuerysetEqual(
            response.context['latest_question_list'],
            ['<Question: Past question 2.>', '<Question: Past question 1.>']
        )


"""

Pretty self explanatory?

In effect, we are using the tests to tell a story of admin input and user experience on the site, 
and checking that at every state and for every new change in the state of the system, 
the expected results are published.

=======================
Testing the DetailView
=======================

What we have works well; however, even though future questions don’t appear in the index, 
users can still reach them if they know or guess the right URL. 
So we need to add a similar constraint to DetailView:

polls/views.py"""
class DetailView(generic.DetailView):
    ...
    def get_queryset(self):
        """
        Excludes any questions that aren't published yet.
        """
        return Question.objects.filter(pub_date__lte=timezone.now())

"""

And of course, we will add some tests, to check that a Question whose pub_date is in the 
past can be displayed, and that one with a pub_date in the future is not:

polls/tests.py"""

class QuestionDetailViewTests(TestCase):
    def test_future_question(self):
        """
        The detail view of a question with a pub_date in the future
        returns a 404 not found.
        """
        future_question = create_question(question_text='Future question.', days=5)
        url = reverse('polls:detail', args=(future_question.id,))
        response = self.client.get(url)
        self.assertEqual(response.status_code, 404)

    def test_past_question(self):
        """
        The detail view of a question with a pub_date in the past
        displays the question's text.
        """
        past_question = create_question(question_text='Past Question.', days=-5)
        url = reverse('polls:detail', args=(past_question.id,))
        response = self.client.get(url)
        self.assertContains(response, past_question.question_text)

"""

Ideas for more tests
======================

We ought to add a similar get_queryset method to ResultsView and create a new test class for that view. It’ll be very similar to what we have just created; in fact there will be a lot of repetition.

We could also improve our application in other ways, adding tests along the way. For example, it’s silly that Questions can be published on the site that have no Choices. So, our views could check for this, and exclude such Questions. Our tests would create a Question without Choices and then test that it’s not published, as well as create a similar Question with Choices, and test that it is published.

Perhaps logged-in admin users should be allowed to see unpublished Questions, but not ordinary visitors. Again: whatever needs to be added to the software to accomplish this should be accompanied by a test, whether you write the test first and then make the code pass the test, or work out the logic in your code first and then write a test to prove it.

At a certain point you are bound to look at your tests and wonder whether your code is 
suffering from test bloat, which brings us to:

When testing, more is better

As long as your tests are sensibly arranged, they won’t become unmanageable. Good rules-of-thumb include having:

    a separate TestClass for each model or view
    a separate test method for each set of conditions you want to test
    test method names that describe their function

This tutorial only introduces some of the basics of testing. There’s a great deal more you can do, and a number of very useful tools at your disposal to achieve some very clever things.

Django includes LiveServerTestCase to facilitate integration with tools like Selenium.

